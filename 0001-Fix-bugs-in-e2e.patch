From cd107db68a5cce61d58ac68f62d152fcdff5132f Mon Sep 17 00:00:00 2001
From: Sergio Sinuco <ssinuco@gmail.com>
Date: Tue, 12 Mar 2024 17:30:05 -0500
Subject: [PATCH] Fix bugs in e2e

---
 e2e/globalSetup.js   |   1 +
 e2e/orders.spec.js   | 252 ++++++++++++++++++++++++++++++++++++++-----
 e2e/products.spec.js |  41 ++++++-
 e2e/users.spec.js    |  64 ++---------
 4 files changed, 274 insertions(+), 84 deletions(-)

diff --git a/e2e/globalSetup.js b/e2e/globalSetup.js
index 622f3ba..50cf480 100644
--- a/e2e/globalSetup.js
+++ b/e2e/globalSetup.js
@@ -21,6 +21,7 @@ const __e2e = {
   testUserCredentials: {
     email: 'test@test.test',
     password: '123456',
+    role: 'chef',
   },
   testUserToken: null,
   childProcessPid: null,
diff --git a/e2e/orders.spec.js b/e2e/orders.spec.js
index e94a3df..ae80c4e 100644
--- a/e2e/orders.spec.js
+++ b/e2e/orders.spec.js
@@ -29,7 +29,12 @@ describe('POST /orders', () => {
     Promise.all([
       fetchAsAdmin('/products', {
         method: 'POST',
-        body: { name: 'Test', price: 10 },
+        body: {
+          name: 'Test',
+          price: 10,
+          image: "https://github.com/Laboratoria/bootcamp/tree/main/projects/04-burger-queen-api/resources/images/water.jpg",
+          type: "Lunch"
+        },
       }),
       fetchAsTestUser('/users/test@test.test'),
     ])
@@ -40,7 +45,17 @@ describe('POST /orders', () => {
       })
       .then(([product, user]) => fetchAsTestUser('/orders', {
         method: 'POST',
-        body: { products: [{ productId: product._id, qty: 5, client: 'client' }], userId: user._id },
+        body: { 
+          userId: user._id,
+          client: 'client',
+          products: [
+            {
+              qty: 5,
+              product: { ...product },
+            }
+          ],
+          status: "pending",
+        },
       }))
       .then((resp) => {
         expect(resp.status).toBe(200);
@@ -61,7 +76,12 @@ describe('POST /orders', () => {
     Promise.all([
       fetchAsAdmin('/products', {
         method: 'POST',
-        body: { name: 'Test', price: 25 },
+        body: {
+          name: 'Test',
+          price: 25,
+          image: "https://github.com/Laboratoria/bootcamp/tree/main/projects/04-burger-queen-api/resources/images/water.jpg",
+          type: "Lunch"
+        },
       }),
       fetchAsTestUser('/users/test@test.test'),
     ])
@@ -72,7 +92,17 @@ describe('POST /orders', () => {
       })
       .then(([product, user]) => fetchAsAdmin('/orders', {
         method: 'POST',
-        body: { products: [{ productId: product._id, qty: 25 }], userId: user._id },
+        body: {
+          userId: user._id,
+          client: 'client',
+          products: [
+            {
+              qty: 5,
+              product: { ...product },
+            }
+          ],
+          status: "pending",          
+        },
       }))
       .then((resp) => {
         expect(resp.status).toBe(200);
@@ -99,7 +129,12 @@ describe('GET /orders', () => {
     Promise.all([
       fetchAsAdmin('/products', {
         method: 'POST',
-        body: { name: 'Test', price: 10 },
+        body: {
+          name: 'Test',
+          price: 10,
+          image: "https://github.com/Laboratoria/bootcamp/tree/main/projects/04-burger-queen-api/resources/images/water.jpg",
+          type: "Lunch"
+        },
       }),
       fetchAsTestUser('/users/test@test.test'),
     ])
@@ -112,11 +147,31 @@ describe('GET /orders', () => {
         Promise.all([
           fetchAsTestUser('/orders', {
             method: 'POST',
-            body: { products: [{ productId: product._id, qty: 50 }], userId: user._id },
+            body: {
+              userId: user._id,
+              client: 'client',
+              products: [
+                {
+                  qty: 50,
+                  product: { ...product },
+                }
+              ],
+              status: "pending",              
+            },
           }),
           fetchAsAdmin('/orders', {
             method: 'POST',
-            body: { products: [{ productId: product._id, qty: 25 }], userId: user._id },
+            body: {
+              userId: user._id,
+              client: 'client',
+              products: [
+                {
+                  qty: 25,
+                  product: { ...product },
+                }
+              ],
+              status: "pending",              
+            },
           }),
         ])
           .then((responses) => {
@@ -145,7 +200,12 @@ describe('GET /orders', () => {
     Promise.all([
       fetchAsAdmin('/products', {
         method: 'POST',
-        body: { name: 'Test', price: 10 },
+        body: {
+          name: 'Test',
+          price: 10,
+          image: "https://github.com/Laboratoria/bootcamp/tree/main/projects/04-burger-queen-api/resources/images/water.jpg",
+          type: "Lunch"
+        },
       }),
       fetchAsTestUser('/users/test@test.test'),
     ])
@@ -158,11 +218,31 @@ describe('GET /orders', () => {
         Promise.all([
           fetchAsTestUser('/orders', {
             method: 'POST',
-            body: { products: [{ productId: product._id, qty: 50 }], userId: user._id },
+            body: {
+              userId: user._id,
+              client: 'client',
+              products: [
+                {
+                  qty: 50,
+                  product: { ...product },
+                }
+              ],
+              status: "pending",               
+            },
           }),
           fetchAsAdmin('/orders', {
             method: 'POST',
-            body: { products: [{ productId: product._id, qty: 25 }], userId: user._id },
+            body: {
+              userId: user._id,
+              client: 'client',
+              products: [
+                {
+                  qty: 25,
+                  product: { ...product },
+                }
+              ],
+              status: "pending", 
+            },
           }),
         ])
           .then((responses) => {
@@ -203,7 +283,12 @@ describe('GET /orders/:orderId', () => {
     Promise.all([
       fetchAsAdmin('/products', {
         method: 'POST',
-        body: { name: 'Test', price: 99 },
+        body: {
+          name: 'Test',
+          price: 99,
+          image: "https://github.com/Laboratoria/bootcamp/tree/main/projects/04-burger-queen-api/resources/images/water.jpg",
+          type: "Lunch"
+        },
       }),
       fetchAsTestUser('/users/test@test.test'),
     ])
@@ -214,7 +299,17 @@ describe('GET /orders/:orderId', () => {
       })
       .then(([product, user]) => fetchAsTestUser('/orders', {
         method: 'POST',
-        body: { products: [{ productId: product._id, qty: 5 }], userId: user._id },
+        body: {
+          userId: user._id,
+          client: 'client',
+          products: [
+            {
+              qty: 50,
+              product: { ...product },
+            }
+          ],
+          status: "pending",           
+        },
       }))
       .then((resp) => {
         expect(resp.status).toBe(200);
@@ -236,7 +331,12 @@ describe('GET /orders/:orderId', () => {
     Promise.all([
       fetchAsAdmin('/products', {
         method: 'POST',
-        body: { name: 'Test', price: 10 },
+        body: {
+          name: 'Test',
+          price: 99,
+          image: "https://github.com/Laboratoria/bootcamp/tree/main/projects/04-burger-queen-api/resources/images/water.jpg",
+          type: "Lunch"
+        },
       }),
       fetchAsTestUser('/users/test@test.test'),
     ])
@@ -247,7 +347,17 @@ describe('GET /orders/:orderId', () => {
       })
       .then(([product, user]) => fetchAsTestUser('/orders', {
         method: 'POST',
-        body: { products: [{ productId: product._id, qty: 5 }], userId: user._id },
+        body: {
+          userId: user._id,
+          client: 'client',
+          products: [
+            {
+              qty: 50,
+              product: { ...product },
+            }
+          ],
+          status: "pending",           
+        },
       }))
       .then((resp) => {
         expect(resp.status).toBe(200);
@@ -284,7 +394,12 @@ describe('PUT /orders/:orderId', () => {
     Promise.all([
       fetchAsAdmin('/products', {
         method: 'POST',
-        body: { name: 'Test', price: 66 },
+        body: {
+          name: 'Test',
+          price: 99,
+          image: "https://github.com/Laboratoria/bootcamp/tree/main/projects/04-burger-queen-api/resources/images/water.jpg",
+          type: "Lunch"
+        },
       }),
       fetchAsTestUser('/users/test@test.test'),
     ])
@@ -295,7 +410,17 @@ describe('PUT /orders/:orderId', () => {
       })
       .then(([product, user]) => fetchAsTestUser('/orders', {
         method: 'POST',
-        body: { products: [{ productId: product._id, qty: 5 }], userId: user._id },
+        body: {
+          userId: user._id,
+          client: 'client',
+          products: [
+            {
+              qty: 50,
+              product: { ...product },
+            }
+          ],
+          status: "pending",           
+        },
       }))
       .then((resp) => {
         expect(resp.status).toBe(200);
@@ -311,7 +436,12 @@ describe('PUT /orders/:orderId', () => {
     Promise.all([
       fetchAsAdmin('/products', {
         method: 'POST',
-        body: { name: 'Test', price: 66 },
+        body: {
+          name: 'Test',
+          price: 99,
+          image: "https://github.com/Laboratoria/bootcamp/tree/main/projects/04-burger-queen-api/resources/images/water.jpg",
+          type: "Lunch"
+        },
       }),
       fetchAsTestUser('/users/test@test.test'),
     ])
@@ -322,7 +452,17 @@ describe('PUT /orders/:orderId', () => {
       })
       .then(([product, user]) => fetchAsTestUser('/orders', {
         method: 'POST',
-        body: { products: [{ productId: product._id, qty: 5 }], userId: user._id },
+        body: {
+          userId: user._id,
+          client: 'client',
+          products: [
+            {
+              qty: 50,
+              product: { ...product },
+            }
+          ],
+          status: "pending",           
+        },
       }))
       .then((resp) => {
         expect(resp.status).toBe(200);
@@ -339,7 +479,12 @@ describe('PUT /orders/:orderId', () => {
     Promise.all([
       fetchAsAdmin('/products', {
         method: 'POST',
-        body: { name: 'Test', price: 66 },
+        body: {
+          name: 'Test',
+          price: 99,
+          image: "https://github.com/Laboratoria/bootcamp/tree/main/projects/04-burger-queen-api/resources/images/water.jpg",
+          type: "Lunch"
+        },
       }),
       fetchAsTestUser('/users/test@test.test'),
     ])
@@ -350,7 +495,17 @@ describe('PUT /orders/:orderId', () => {
       })
       .then(([product, user]) => fetchAsTestUser('/orders', {
         method: 'POST',
-        body: { products: [{ productId: product._id, qty: 5 }], userId: user._id },
+        body: { 
+          userId: user._id,
+          client: 'client',
+          products: [
+            {
+              qty: 50,
+              product: { ...product },
+            }
+          ],
+          status: "pending",           
+        },
       }))
       .then((resp) => {
         expect(resp.status).toBe(200);
@@ -374,7 +529,12 @@ describe('PUT /orders/:orderId', () => {
     Promise.all([
       fetchAsAdmin('/products', {
         method: 'POST',
-        body: { name: 'Test', price: 66 },
+        body: {
+          name: 'Test',
+          price: 99,
+          image: "https://github.com/Laboratoria/bootcamp/tree/main/projects/04-burger-queen-api/resources/images/water.jpg",
+          type: "Lunch"
+        },
       }),
       fetchAsTestUser('/users/test@test.test'),
     ])
@@ -385,7 +545,17 @@ describe('PUT /orders/:orderId', () => {
       })
       .then(([product, user]) => fetchAsTestUser('/orders', {
         method: 'POST',
-        body: { products: [{ productId: product._id, qty: 5 }], userId: user._id },
+        body: {
+          userId: user._id,
+          client: 'client',
+          products: [
+            {
+              qty: 50,
+              product: { ...product },
+            }
+          ],
+          status: "pending",           
+        },
       }))
       .then((resp) => {
         expect(resp.status).toBe(200);
@@ -409,7 +579,12 @@ describe('PUT /orders/:orderId', () => {
     Promise.all([
       fetchAsAdmin('/products', {
         method: 'POST',
-        body: { name: 'Test', price: 66 },
+        body: {
+          name: 'Test',
+          price: 99,
+          image: "https://github.com/Laboratoria/bootcamp/tree/main/projects/04-burger-queen-api/resources/images/water.jpg",
+          type: "Lunch"
+        },
       }),
       fetchAsTestUser('/users/test@test.test'),
     ])
@@ -420,7 +595,17 @@ describe('PUT /orders/:orderId', () => {
       })
       .then(([product, user]) => fetchAsTestUser('/orders', {
         method: 'POST',
-        body: { products: [{ productId: product._id, qty: 5 }], userId: user._id },
+        body: {
+          userId: user._id,
+          client: 'client',
+          products: [
+            {
+              qty: 50,
+              product: { ...product },
+            }
+          ],
+          status: "pending",           
+        },
       }))
       .then((resp) => {
         expect(resp.status).toBe(200);
@@ -459,7 +644,12 @@ describe('DELETE /orders/:orderId', () => {
     Promise.all([
       fetchAsAdmin('/products', {
         method: 'POST',
-        body: { name: 'Test', price: 25 },
+        body: {
+          name: 'Test',
+          price: 99,
+          image: "https://github.com/Laboratoria/bootcamp/tree/main/projects/04-burger-queen-api/resources/images/water.jpg",
+          type: "Lunch"
+        },
       }),
       fetchAsTestUser('/users/test@test.test'),
     ])
@@ -470,7 +660,17 @@ describe('DELETE /orders/:orderId', () => {
       })
       .then(([product, user]) => fetchAsTestUser('/orders', {
         method: 'POST',
-        body: { products: [{ productId: product._id, qty: 5 }], userId: user._id },
+        body: {
+          userId: user._id,
+          client: 'client',
+          products: [
+            {
+              qty: 50,
+              product: { ...product },
+            }
+          ],
+          status: "pending",           
+        },
       }))
       .then((resp) => {
         expect(resp.status).toBe(200);
diff --git a/e2e/products.spec.js b/e2e/products.spec.js
index 9630b21..1972251 100644
--- a/e2e/products.spec.js
+++ b/e2e/products.spec.js
@@ -23,7 +23,12 @@ describe('POST /products', () => {
   it('should create product as admin', () => (
     fetchAsAdmin('/products', {
       method: 'POST',
-      body: { name: 'Test', price: 5 },
+      body: {
+        name: 'Test',
+        price: 5,
+        image: "https://github.com/Laboratoria/bootcamp/tree/main/projects/04-burger-queen-api/resources/images/water.jpg",
+        type: "Lunch"
+      },
     })
       .then((resp) => {
         expect(resp.status).toBe(200);
@@ -33,6 +38,8 @@ describe('POST /products', () => {
         expect(typeof json._id).toBe('string');
         expect(typeof json.name).toBe('string');
         expect(typeof json.price).toBe('number');
+        expect(typeof json.image).toBe('string');
+        expect(typeof json.type).toBe('string');
       })
   ));
 });
@@ -50,6 +57,8 @@ describe('GET /products', () => {
           expect(typeof product._id).toBe('string');
           expect(typeof product.name).toBe('string');
           expect(typeof product.price).toBe('number');
+          expect(typeof product.image).toBe('string');
+          expect(typeof product.type).toBe('string');
         });
       })
   ));
@@ -74,6 +83,8 @@ describe('GET /products/:productid', () => {
           expect(typeof product._id).toBe('string');
           expect(typeof product.name).toBe('string');
           expect(typeof product.price).toBe('number');
+          expect(typeof product.image).toBe('string');
+          expect(typeof product.type).toBe('string');
         });
         return fetchAsTestUser(`/products/${json[0]._id}`)
           .then((resp) => ({ resp, product: json[0] }));
@@ -97,7 +108,12 @@ describe('PUT /products/:productid', () => {
   it('should fail with 403 when not admin', () => (
     fetchAsAdmin('/products', {
       method: 'POST',
-      body: { name: 'Test', price: 10 },
+      body: {
+        name: 'Test',
+        price: 10,
+        image: "https://github.com/Laboratoria/bootcamp/tree/main/projects/04-burger-queen-api/resources/images/water.jpg",
+        type: "Lunch"
+      },
     })
       .then((resp) => {
         expect(resp.status).toBe(200);
@@ -121,7 +137,12 @@ describe('PUT /products/:productid', () => {
   it('should fail with 400 when bad props', () => (
     fetchAsAdmin('/products', {
       method: 'POST',
-      body: { name: 'Test', price: 10 },
+      body: {
+        name: 'Test',
+        price: 10,
+        image: "https://github.com/Laboratoria/bootcamp/tree/main/projects/04-burger-queen-api/resources/images/water.jpg",
+        type: "Lunch"
+      },
     })
       .then((resp) => {
         expect(resp.status).toBe(200);
@@ -164,7 +185,12 @@ describe('DELETE /products/:productid', () => {
   it('should fail with 403 when not admin', () => (
     fetchAsAdmin('/products', {
       method: 'POST',
-      body: { name: 'Test', price: 10 },
+      body: {
+        name: 'Test',
+        price: 10,
+        image: "https://github.com/Laboratoria/bootcamp/tree/main/projects/04-burger-queen-api/resources/images/water.jpg",
+        type: "Lunch"
+      },
     })
       .then((resp) => {
         expect(resp.status).toBe(200);
@@ -182,7 +208,12 @@ describe('DELETE /products/:productid', () => {
   it('should delete other product as admin', () => (
     fetchAsAdmin('/products', {
       method: 'POST',
-      body: { name: 'Test', price: 10 },
+      body: {
+        name: 'Test',
+        price: 10,
+        image: "https://github.com/Laboratoria/bootcamp/tree/main/projects/04-burger-queen-api/resources/images/water.jpg",
+        type: "Lunch"
+      },
     })
       .then((resp) => {
         expect(resp.status).toBe(200);
diff --git a/e2e/users.spec.js b/e2e/users.spec.js
index 928c992..5b897d7 100644
--- a/e2e/users.spec.js
+++ b/e2e/users.spec.js
@@ -9,12 +9,6 @@ const {
   fetchWithAuth,
 } = process;
 
-const parseLinkHeader = (str) => str.split(',')
-  .reduce((memo, item) => {
-    const [, value, key] = /^<(.*)>;\s+rel="(first|last|prev|next)"/.exec(item.trim());
-    return { ...memo, [key]: value };
-  }, {});
-
 describe('GET /users', () => {
   it('should fail with 401 when no auth', () => (
     fetch('/users').then((resp) => expect(resp.status).toBe(401))
@@ -39,48 +33,12 @@ describe('GET /users', () => {
   ));
 
   it('should get users with pagination', () => (
-    fetchAsAdmin('/users?limit=1')
+    fetchAsAdmin('/users?_limit=1')
       .then((resp) => {
         expect(resp.status).toBe(200);
-        return resp.json().then((json) => ({ headers: resp.headers, json }));
-      })
-      .then(({ headers, json }) => {
-        const linkHeader = parseLinkHeader(headers.get('link'));
-
-        const nextUrlObj = url.parse(linkHeader.next);
-        const lastUrlObj = url.parse(linkHeader.last);
-        const nextQuery = qs.parse(nextUrlObj.query);
-        const lastQuery = qs.parse(lastUrlObj.query);
-
-        expect(nextQuery.limit).toBe('1');
-        expect(nextQuery.page).toBe('2');
-        expect(lastQuery.limit).toBe('1');
-        expect(lastQuery.page >= 2).toBe(true);
-
-        expect(Array.isArray(json)).toBe(true);
-        expect(json.length).toBe(1);
-        expect(json[0]).toHaveProperty('_id');
-        expect(json[0]).toHaveProperty('email');
-        return fetchAsAdmin(nextUrlObj.path);
-      })
-      .then((resp) => {
-        expect(resp.status).toBe(200);
-        return resp.json().then((json) => ({ headers: resp.headers, json }));
+        return resp.json();
       })
-      .then(({ headers, json }) => {
-        const linkHeader = parseLinkHeader(headers.get('link'));
-
-        const firstUrlObj = url.parse(linkHeader.first);
-        const prevUrlObj = url.parse(linkHeader.prev);
-
-        const firstQuery = qs.parse(firstUrlObj.query);
-        const prevQuery = qs.parse(prevUrlObj.query);
-
-        expect(firstQuery.limit).toBe('1');
-        expect(firstQuery.page).toBe('1');
-        expect(prevQuery.limit).toBe('1');
-        expect(prevQuery.page).toBe('1');
-
+      .then(({ json }) => {
         expect(Array.isArray(json)).toBe(true);
         expect(json.length).toBe(1);
         expect(json[0]).toHaveProperty('_id');
@@ -155,7 +113,7 @@ describe('POST /users', () => {
       body: {
         email: 'test1@test.test',
         password: '12345',
-        roles: { admin: false },
+        role: "waiter",
       },
     })
       .then((resp) => {
@@ -166,8 +124,8 @@ describe('POST /users', () => {
         expect(typeof json._id).toBe('string');
         expect(typeof json.email).toBe('string');
         expect(typeof json.password).toBe('undefined');
-        expect(typeof json.roles).toBe('object');
-        expect(json.roles.admin).toBe(false);
+        expect(typeof json.role).toBe('string');
+        expect(json.role).toBe("waiter");
       })
   ));
 
@@ -177,7 +135,7 @@ describe('POST /users', () => {
       body: {
         email: 'admin1@test.test',
         password: '12345',
-        roles: { admin: true },
+        role: "admin",
       },
     })
       .then((resp) => {
@@ -188,8 +146,8 @@ describe('POST /users', () => {
         expect(typeof json._id).toBe('string');
         expect(typeof json.email).toBe('string');
         expect(typeof json.password).toBe('undefined');
-        expect(typeof json.roles).toBe('object');
-        expect(json.roles.admin).toBe(true);
+        expect(typeof json.role).toBe('string');
+        expect(json.role).toBe("admin");
       })
   ));
 
@@ -223,10 +181,10 @@ describe('PUT /users/:uid', () => {
       .then((resp) => expect(resp.status).toBe(400))
   ));
 
-  it('should fail with 403 when not admin tries to change own roles', () => (
+  it('should fail with 403 when not admin tries to change own role', () => (
     fetchAsTestUser('/users/test@test.test', {
       method: 'PUT',
-      body: { roles: { admin: true } },
+      body: { role: "admin" },
     })
       .then((resp) => expect(resp.status).toBe(403))
   ));
-- 
2.43.0

